//创建一个RDD
val rdd=sc.parallelize(List(1,2,3,4,5,6),3)

1：aggregate函数
函数原型：
def aggregate[U](zeroValue: U)(seqOp: (U, Int) => U,combOp: (U, U) => U)
aggregate是一个柯里化函数：
第一个参数是聚集的初始值：提供一个初始值
第二个参数分区内部聚集：类似于Hadoop里面的combiner
第三个参数分区结果聚集：类似于Hadoop里面对combiner结果的reducer
例如：rdd.aggregate(0)((x,y)=>x+y,(x,y)=>x+y)   //结果是21
初始值是：0
第一个参数是：(x,y)=>x+y  //求rdd的每一个分区内部的和
第二个参数是：(x,y)=>x+y  //对分区的和进行求和

2：mapPartitions函数
函数原型：
def mapPartitions[U](f: Iterator[Int] => Iterator[U],preservesPartitioning: Boolean)
函数的第一个参数是：传入一个迭代器到迭代器的函数
例如：rdd.mapPartitions(x=>x.toList.map(_+1).iterator)
传入的函数是：x=>x.toList.map(_+1).iterator ，对迭代器中的每一个数字进行+1之后再转回迭代器返回
程序输出结果是：Array[Int] = Array(2, 3, 4, 5, 6, 7)

3：mapPartitionsWithIndex函数
函数原型：
def mapPartitionsWithIndex[U](f: (Int, Iterator[Int]) => Iterator[U],preservesPartitioning: Boolean)
函数的第一个参数是：传入一个元组到迭代器的函数，其中元组第一个参数是分区的index标号，Iterator[Int]是该分区内的数据
例如：rdd.mapPartitionsWithIndex((index,it)=>it.toList.map((index,_)).iterator)
传入的函数是(index,it)=>it.toList.map((index,_)).iterator 是将每一个分区内的数据和分区编号组成一个元组，最后将结果转成迭代器返回


4：cogroup函数
函数原型：多个重载，自行去看API


val rdd=sc.parallelize(List(1,2,1,2,3,1,2,3,4,5,2),3)
val rdd1=rdd.map(x=>(x,"a"))
val rdd2=rdd.map(x=>(x,"b"))

rdd1.collect
结果：Array[(Int, String)] = Array((1,a), (2,a), (1,a), (2,a), (3,a), (1,a), (2,a), (3,a), (4,a), (5,a), (2,a))

rdd2.collect
结果：Array[(Int, String)] = Array((1,b), (2,b), (1,b), (2,b), (3,b), (1,b), (2,b), (3,b), (4,b), (5,b), (2,b))

rdd1.cogroup(rdd2).collect
结果：Array[(Int, (Iterable[String], Iterable[String]))] = Array((3,(CompactBuffer(a, a),CompactBuffer(b, b))), (4,(CompactBuffer(a),CompactBuffer(b))), (1,(CompactBuffer(a, a, a),CompactBuffer(b, b, b))), (5,(CompactBuffer(a),CompactBuffer(b))), (2,(CompactBuffer(a, a, a, a),CompactBuffer(b, b, b, b))))


数输出结果进行整理：
 (3,(CompactBuffer(a, a),CompactBuffer(b, b))),
 (4,(CompactBuffer(a),CompactBuffer(b))),
 (1,(CompactBuffer(a, a, a),CompactBuffer(b, b, b))),
 (5,(CompactBuffer(a),CompactBuffer(b))),
 (2,(CompactBuffer(a, a, a, a),CompactBuffer(b, b, b, b)))

 对于rdd1中key=1的value有a,a,a  在rdd2中key=1的value有b,b,b 所以： (1,(CompactBuffer(a, a, a),CompactBuffer(b, b, b))),
 其他同理
















